apply plugin: 'com.android.application'

//脚本插件
apply from: 'config.gradle'
//对象插件
apply plugin: CustomGradlePlugin

//独立项目插件
apply plugin: 'CustomPlugin2'

//资源混淆插件
apply plugin: 'AndResGuard'


android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.base.base"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

//      多渠道包的code
        flavorDimensions "versioncode"

        //筛选国际话语言,那如果知道语言的缩写呢，可以通过apk里的resources.asrc查看
        resConfigs 'zh-rCN'
        ndk{
            //一般我只需要配置 ‘armeabi-v7a’
            abiFilters 'armeabi-v7a'
        }
    }

//  签名配置
    signingConfigs {
        debug {
            keyAlias 'helloword'
            keyPassword 'fans1234'
            storeFile file('base.jks')
            storePassword 'fans1234'
        }
        release {
            keyAlias 'helloword'
            keyPassword 'fans1234'
            storeFile file('base.jks')
            storePassword 'fans1234'
        }
    }

    buildTypes {
        debug {
//          打印
            println "address:" + getServerUrl("debug")
            buildConfigField("String", "url", getServerUrl("debug"))
            signingConfig signingConfigs.debug
        }
        release {
            buildConfigField("String", "url", getServerUrl("debug"))
//          混淆
            minifyEnabled true
//            resourceEnable true
//          签名配置
            signingConfig signingConfigs.release

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

//  apk包输出包名配置
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            def version = "v${versionName}(${versionCode})_${variant.productFlavors[0].name}_${variant.buildType.name}"
            def apkName = "base"
            def fileName = "${apkName}_${version}_${getCurrentTime()}.apk"
            outputFileName = fileName
        }
    }
//  打多个渠道包，友盟，自己统计
//  1、打不同的去到包，然后投放到不同的平台或者应用市场
    productFlavors {
        xiaomi {}
        qh360 {}
    }
//  一键化多渠道打包
    productFlavors.all {
        flavor ->
            buildConfigField "String", "PLATE_FROM", "\"${name}\""
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}


def getCurrentTime() {
//   java中生成当前时间
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"));
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation project(path: ':baselib')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
//    implementation 'cn.hutool:hutool-all:5.6.6'

}

//build.gradle内自定义插件对象
class CustomGradlePlugin implements Plugin<Project> {
    @Override
    void apply(Project target) {
        target.task("showCustomPlugin") {
            doLast {
                println("this is CustomGradlePlugin")
            }
        }
    }
}


//用groovy语法获取配置
def getServerUrl(String str) {
    def url;
    Properties properties = new Properties()
    def proFile = file("src/main/filters/" + str + "/config.properties")
    if (proFile.canRead()) {
        properties.load(new FileInputStream(proFile))
        if (properties != null) {
            url = properties["serverUrl"]
        }
    }
//    返回url
    url
}



andResGuard {
    // mappingFile = file("./resource_mapping.txt")
    mappingFile = null
    use7zip = true
    useSign = true
    // 打开这个开关，会keep住所有资源的原始路径，只混淆资源的名字
    keepRoot = false
    // 设置这个值，会把arsc name列混淆成相同的名字，减少string常量池的大小
    fixedResName = "arg"
    // 打开这个开关会合并所有哈希值相同的资源，但请不要过度依赖这个功能去除去冗余资源
    mergeDuplicatedRes = true
    whiteList = [
//            // for your icon
//            "R.drawable.icon",
//            // for fabric
//            "R.string.com.crashlytics.*",
//            // for google-services
//            "R.string.google_app_id",
//            "R.string.gcm_defaultSenderId",
//            "R.string.default_web_client_id",
//            "R.string.ga_trackingId",
//            "R.string.firebase_database_url",
//            "R.string.google_api_key",
//            "R.string.google_crash_reporting_api_key"
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.21'
        //path = "/usr/local/bin/7za"
    }

    /**
     * 可选： 如果不设置则会默认覆盖assemble输出的apk
     **/
     finalApkBackupPath = "${project.rootDir}/app/final_ndk.apk"

    /**
     * 可选: 指定v1签名时生成jar文件的摘要算法
     * 默认值为“SHA-1”
     **/
    // digestalg = "SHA-256"
}
